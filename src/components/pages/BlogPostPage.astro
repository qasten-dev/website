---
import Layout from "@/layouts/Layout.astro";
import { formatDate, topics, type Blog } from "@/utils/blog";
import { Image } from "astro:assets";
import { render } from "astro:content";
import { Icon } from "astro-icon/components";
import { team } from "@/utils/team";
import path from "path";
import fs from "fs";

import { getTranslations, getSafeCurrentLocale } from "@/utils/i18n";

const { post } = Astro.props as { post: Blog };
const { data } = post;
const { Content } = await render(post);

const currentLocale = getSafeCurrentLocale(Astro.currentLocale);

const t = getTranslations(currentLocale);

const publishedDate = formatDate(data.publishedDate, currentLocale);
const author = team[data.author];
const site = Astro.site?.toString();
const wordCount = (post.body ?? "").split(/\s+/).length;
const minutes = Math.ceil(wordCount / 150);

const requiredRatios = ["1x1", "4x3", "16x9"];
const relativeImagePaths = requiredRatios.map(
  (ratio) => `blog/${post.id}/${ratio}.png`,
);
const openGraphMetadata = {
  imageRelativePath: relativeImagePaths[2], // 16x9
  type: "article",
};

const publicDir = path.resolve(process.cwd(), "public");
for (const relativePath of relativeImagePaths) {
  const imagePath = path.join(publicDir, relativePath);
  if (!fs.existsSync(imagePath)) {
    throw new Error(`Missing required blog image: ${imagePath}`);
  }
}

const structuredData = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  headline: data.title,
  description: data.summary,
  author: {
    "@type": "Person",
    name: author.displayName,
    jobTitle: author.jobTitle,
    url: author.url,
  },
  publisher: {
    "@type": "Organization",
    name: "Qasten",
    url: site,
    logo: {
      "@type": "ImageObject",
      url: site + "logo.png",
    },
  },
  datePublished: data.publishedDate.toISOString(),
  dateModified: (data.lastModified ?? data.publishedDate).toISOString(),
  image: relativeImagePaths.map((relativePath) =>
    new URL(relativePath, Astro.site).toString(),
  ),
  url: Astro.url.href,
  timeRequired: `PT${minutes}M`,
  wordCount,
  inLanguage: currentLocale,
  isAccessibleForFree: true,
  keywords: data.keywords,
  mainEntityOfPage: {
    "@type": "WebPage",
    "@id": Astro.url.href,
  },
  about: data.topics.map((topicKey) => ({
    "@type": "Thing",
    name: topics[topicKey][currentLocale],
    sameAs: topics[topicKey].wikidata,
  })),
};
---

<Layout
  noBackground
  title={data.title}
  description={data.summary}
  openGraphMetadata={openGraphMetadata}
>
  <main class="mt-24">
    <div class="mx-auto w-full max-w-6xl px-8 text-center">
      <h1 class="text-4xl font-semibold sm:text-6xl md:text-5xl">
        {data.title}
      </h1>
      <div class="mt-6 text-gray-500">
        <p>
          <span class="font-medium">{publishedDate}</span>
          {
            data.lastModified && (
              <span class="text-sm italic">
                ({t.updated}
                {formatDate(data.lastModified, currentLocale)})
              </span>
            )
          }
        </p>

        <p class="mt-4 flex items-center justify-center gap-4 text-sm">
          <span class="flex items-center gap-2">
            <Icon name="mdi:timer-outline" class="text-lg" />{minutes}
            {t.timeToRead}
          </span>
          <span>â€¢</span>
          <span class="flex gap-2">
            <Image
              src={author.image}
              alt={author.displayName}
              class="h-4 w-4 origin-top scale-120 rounded-full object-cover"
            />{author.displayName}
          </span>
        </p>
      </div>

      <a
        target="_blank"
        rel="noopener"
        aria-label="Share on LinkedIn"
        href={`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(Astro.url.href)}`}
        ><Icon
          name="mdi:linkedin"
          class="mx-auto mt-4 cursor-pointer text-3xl text-sky-700"
        />
      </a>
    </div>
    <article
      class="prose prose-img:rounded-2xl mx-auto mt-8 w-full max-w-4xl px-4 leading-relaxed text-gray-700"
    >
      <Image src={data.image.src} alt={data.image.alt} class="rounded-2xl" />

      <Content />
    </article>
  </main>
  <script
    type="application/ld+json"
    set:html={JSON.stringify(structuredData)}
  />
</Layout>
